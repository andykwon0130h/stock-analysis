name: Indicator Report + Pages

on:
  workflow_dispatch:
    inputs:
      TICKERS:
        description: "Comma-separated tickers (e.g., AAPL,MSFT,005930.KS)"
        required: false
        default: "AAPL,MSFT,005930.KS"
      DATES:
        description: "Comma-separated dates YYYY-MM-DD (e.g., 2024-06-03,2023-10-31)"
        required: false
        default: "2024-06-03"
      RSI_LEN:
        required: false
        default: "14"
      STOCH_LEN:
        required: false
        default: "14"
      SMOOTH_K:
        required: false
        default: "3"
      SMOOTH_D:
        required: false
        default: "3"
      SMA_WINDOW:
        required: false
        default: "200"
  schedule:
    - cron: "30 0 * * *"   # 매일 00:30 UTC (KST 09:30)

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas yfinance
          fi

      - name: Load config.json -> env (optional)
        run: |
          python - << 'PY'
          import json, os, sys
          p = 'config.json'
          if not os.path.exists(p):
            sys.exit(0)
          cfg = json.load(open(p, encoding='utf-8'))
          j = lambda x: ",".join(map(str, x))
          with open(os.environ["GITHUB_ENV"], "a", encoding="utf-8") as f:
            f.write(f"TICKERS={j(cfg.get('tickers', [])) or 'AAPL'}\n")
            f.write(f"DATES={j(cfg.get('dates', [])) or '2024-06-03'}\n")
            prm = cfg.get('params', {})
            f.write(f"RSI_LEN={prm.get('rsi_len', 14)}\n")
            f.write(f"STOCH_LEN={prm.get('stoch_len', 14)}\n")
            f.write(f"SMOOTH_K={prm.get('smooth_k', 3)}\n")
            f.write(f"SMOOTH_D={prm.get('smooth_d', 3)}\n")
            f.write(f"SMA_WINDOW={prm.get('sma_window', 200)}\n")
          PY

      - name: Run indicator script
        env:
          TICKERS:     ${{ env.TICKERS || github.event.inputs.TICKERS || 'AAPL,MSFT,005930.KS' }}
          DATES:       ${{ env.DATES   || github.event.inputs.DATES   || '2024-06-03' }}
          RSI_LEN:     ${{ env.RSI_LEN || github.event.inputs.RSI_LEN || '14' }}
          STOCH_LEN:   ${{ env.STOCH_LEN || github.event.inputs.STOCH_LEN || '14' }}
          SMOOTH_K:    ${{ env.SMOOTH_K || github.event.inputs.SMOOTH_K || '3' }}
          SMOOTH_D:    ${{ env.SMOOTH_D || github.event.inputs.SMOOTH_D || '3' }}
          SMA_WINDOW:  ${{ env.SMA_WINDOW || github.event.inputs.SMA_WINDOW || '200' }}
        run: |
          python indicator_lookup.py

      - name: Upload CSV artifact
        uses: actions/upload-artifact@v4
        with:
          name: indicators_result
          path: indicators_result.csv
          if-no-files-found: error

      - name: Make site (CSV -> HTML with DataTables)
        run: |
          python - << 'PY'
          import os, shutil
          os.makedirs('public', exist_ok=True)
          shutil.copyfile('indicators_result.csv', 'public/indicators_result.csv')
          html_doc = """<!doctype html>
          <html lang="ko">
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>Indicators Result</title>
            <link rel="stylesheet" href="https://cdn.datatables.net/1.13.8/css/jquery.dataTables.min.css">
            <style>
              body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial; margin:24px}
              h1{margin:0 0 8px}
              .meta{color:#666; margin:0 0 16px}
              table.dataTable thead th{position:sticky; top:0; background:#fff}
            </style>
          </head>
          <body>
            <h1>Indicators Result</h1>
            <p class="meta">최신 CSV: <a href="./indicators_result.csv" download>다운로드</a></p>
            <table id="tbl" class="display" style="width:100%"><thead></thead><tbody></tbody></table>
            <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
            <script src="https://cdn.datatables.net/1.13.8/js/jquery.dataTables.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
            <script>
              Papa.parse('indicators_result.csv?t=' + Date.now(), {
                download: true, header: true, dynamicTyping: true,
                complete: (res) => {
                  const data = res.data.filter(r => Object.keys(r).length);
                  if (!data.length) return;
                  const cols = Object.keys(data[0]);
                  $('#tbl thead').html('<tr>' + cols.map(c=>`<th>${c}</th>`).join('') + '</tr>');
                  $('#tbl tbody').html(data.map(r => '<tr>' + cols.map(c => `<td>${r[c] ?? ''}</td>`).join('') + '</tr>').join(''));
                  $('#tbl').DataTable({
                    pageLength: 25, lengthMenu: [10,25,50,100], order: [],
                    language: { search:'검색:', lengthMenu:'_MENU_ 개씩 보기', info:'_TOTAL_개 중 _START_–_END_', infoEmpty:'표시할 항목 없음', zeroRecords:'일치하는 항목이 없습니다',
                      paginate:{ first:'처음', last:'마지막', next:'다음', previous:'이전' } }
                  });
                }
              });
            </script>
          </body>
          </html>"""
          open('public/index.html','w',encoding='utf-8').write(html_doc)
          PY

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
